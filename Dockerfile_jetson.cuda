# Base image: L4T JetPack (Ubuntu 20.04 with JetPack components for Jetson AGX Orin)
FROM nvcr.io/nvidia/l4t-jetpack:r35.2.1

# Set non-interactive debconf
ENV DEBIAN_FRONTEND=noninteractive

# Update and install basic tools and dependencies
RUN apt-get update && apt-get install -y \
    gnupg2 curl lsb-release wget build-essential cmake git pkg-config unzip vim nano \
    python3-pip python3-dev python3-numpy \
    libgl1-mesa-dev libglew-dev libgtk-3-dev libpython3-dev libeigen3-dev \
    libavcodec-dev libavformat-dev libswscale-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    && rm -rf /var/lib/apt/lists/*

# Set up ROS Noetic apt repository and key
RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F42ED6FBAB17C654

# Install ROS Noetic (choose a lightweight metapackage if desired)
RUN apt-get update && apt-get install -y ros-noetic-ros-base python3-rosdep python3-rosinstall-generator python3-wstool python3-vcstools python3-catkin-tools && \
    rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Source ROS setup in bashrc for convenience
RUN echo "source /opt/ros/noetic/setup.bash" >> /root/.bashrc

# [Optional] Install Jetson-specific multimedia/camera packages if needed (e.g., V4L2, GStreamer plugins)
# RUN apt-get update && apt-get install -y nvidia-l4t-gstreamer nvidia-l4t-multimedia && rm -rf /var/lib/apt/lists/*

# Environment variables for NVIDIA Container Runtime
ENV NVIDIA_VISIBLE_DEVICES=all 
ENV NVIDIA_DRIVER_CAPABILITIES=all

# Build OpenCV from source (with CUDA support)
WORKDIR /tmp
RUN git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git && \
    cd opencv && git checkout 4.5.4 && \
    cd ../opencv_contrib && git checkout 4.5.4 && \
    cd ../opencv && mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_CUDA=ON -D WITH_CUDNN=ON -D CUDA_ARCH_BIN="8.7" \
          -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib/modules \
          -D BUILD_OPENCV_PYTHON3=ON -D BUILD_OPENCV_GUI=ON \
          -D BUILD_EXAMPLES=OFF -D BUILD_TESTS=OFF -D BUILD_DOCS=OFF .. && \
    make -j$(nproc) && make install && \
    cd /tmp && rm -rf opencv opencv_contrib


# Build Pangolin (for ORB-SLAM3 visualization)
RUN git clone https://github.com/stevenlovegrove/Pangolin.git && cd Pangolin && git checkout v0.6 && \
    mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DCPP11_NO_BOOST=ON .. && \
    make -j$(nproc) && make install && \
    cd /tmp && rm -rf Pangolin

# Copy ROS entrypoint script
COPY ros_entrypoint.sh /ros_entrypoint.sh
RUN chmod +x /ros_entrypoint.sh

# Set ROS environment variables
ENV ROS_DISTRO=noetic
ENV LANG=C.UTF-8

# Create workspace for ORB_SLAM3 source
RUN mkdir -p /ORB_SLAM3
WORKDIR /ORB_SLAM3

# Download and extract ORB-SLAM3
WORKDIR /ORB_SLAM3
RUN apt-get update && apt-get install -y wget unzip && \
    wget -O ORB_SLAM3.zip https://github.com/UZ-SLAMLab/ORB_SLAM3/archive/refs/heads/master.zip && \
    unzip ORB_SLAM3.zip && \
    mv ORB_SLAM3-master/* . && \
    rm -rf ORB_SLAM3.zip ORB_SLAM3-master && \
    chmod +x build.sh && ./build.sh && \
    chmod +x build_ros.sh && ./build_ros.sh



ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
